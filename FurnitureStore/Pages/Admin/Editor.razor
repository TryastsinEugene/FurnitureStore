@page "/admin/products/edit/{id:long}"
@page "/admin/products/create"
@inherits OwningComponentBase<FurnitureStore.Data.Service.IProductService>

<style>
    div.validation-message {
        color: rgb(220, 53, 69);
        font-weight: 500
    }
</style>

<h3 class="bg-@ThemeColor text-white text-center p-1">@TitleText a Product</h3>
<EditForm Model="Product" OnValidSubmit="SaveProduct">
    <DataAnnotationsValidator />
    @if (Product.Id != 0)
    {
<div class="form-group">
    <label>ID</label>
    <input class="form-control" disabled value="@Product.Id" />
    <input class="form-control" disabled value="@Product.CategoryId" />
</div>
    }
    <div class="form-group">
        <label>Name</label>
        <ValidationMessage For="@(() => Product.Name)" />
        <InputText class="form-control" @bind-Value="Product.Name" />
    </div>
    <div class="form-group">
        <label>Description</label>
        <ValidationMessage For="@(() => Product.Desciption)" />
        <InputText class="form-control" @bind-Value="Product.Desciption" />
    </div>
    <div class="form-group">
        <label>Category</label>
        <CategorySelect TValue="long" Values="Categories" Parser="@(str => long.Parse(str))"
                        @bind-Value="Product.CategoryId">
            <option selected disabled value="0">Choose a Category</option>
        </CategorySelect>
    </div>
    <div class="form-group">
        <label>Price</label>
        <ValidationMessage For="@(() => Product.Price)" />
        <InputNumber class="form-control" @bind-Value="Product.Price" />
    </div>
    <button type="submit" class="btn btn-@ThemeColor">Save</button>
    <NavLink class="btn btn-secondary" href="/admin/products">Cancel</NavLink>
</EditForm>

@code {

    public FurnitureStore.Data.Service.IProductService Repository => Service;
    [Inject]
    public NavigationManager NavManager { get; set; }
    [Inject]
    DataContext Context { get; set; }

    [Parameter]
    public long Id { get; set; } = 0;

    public Product Product { get; set; } = new Product();
    public IDictionary<string, long> Categories { get; set; } = new Dictionary<string, long>();

    protected override void OnParametersSet()
    {
        if (Id != 0)
        {
            Product = Repository.AllProducts().FirstOrDefault(p => p.Id == Id);
        }
            Categories = Context.Categories.ToDictionary(c => c.Name, c => c.Id);
    }

    public void SaveProduct()
    {
        if (Id == 0)
        {
            Repository.AddProduct(Product);
        }
        else
        {
            Repository.SaveProduct(Product);
        }
        NavManager.NavigateTo("/admin/products");
    }

    public string ThemeColor => Id == 0 ? "primary" : "warning";
    public string TitleText => Id == 0 ? "Create" : "Edit";
}
